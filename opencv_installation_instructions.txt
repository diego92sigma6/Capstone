# Using the Raspbian Provided OpenCV Pre-compiled Binaries ####################################################

Note: I do NOT recommend following the steps in this section, this is here for information/reference only.  The recommended procedure is to not perform the steps in this section and to continue to the next section to compile OpenCV 3.0.0 or later from source.

Raspbian includes OpenCV precompiled binaries, which as of the most recent release are only moderately out of date (OpenCV 2.4.9).  At a RPi command line enter the following:

dpkg -l | less

This will list all installed packages.  Navigate to the opencv libs and you will see the version of the OpenCV libraries included with the current Raspbian build is 2.4.9, which was released in April of 2014.  If you would like to use these pre-compiled binaries, proceed as follows at the RPi command line (as mentioned above this is NOT recommended):

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install libopencv-dev python-opencv

# verify the OpenCV install

python
>>> import cv2
>>> cv2.__version__        # will say "2.4.9" if pre-compiled binary installation was successful

Note that if you use these old pre-compiled binaries the OpenCV Python programs used in this tutorial will NOT work since they have been written for OpenCV 3.

# OpenCV Compile ################################################################################################

# this takes about 3.5 hours total on a RPi 2, the make command alone takes about 3 hours

cd ~

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install python-numpy python-scipy python-matplotlib

sudo apt-get install build-essential cmake pkg-config

sudo apt-get install default-jdk ant

sudo apt-get install libgtkglext1-dev

sudo apt-get install v4l-utils

sudo apt-get install libjpeg8 \
libjpeg8-dev \
libjpeg8-dbg \
libjpeg-progs \
libavcodec-dev \
libavformat-dev \
libgstreamer0.10-0-dbg \
libgstreamer0.10-0 \
libgstreamer0.10-dev \
libxine2-dev \
libunicap2 \
libunicap2-dev \
swig \
libv4l-0 \
libv4l-dev \
python-numpy \
libpython2.7 \
python-dev \
python2.7-dev \
libgtk2.0-dev \
libjasper-dev \
libpng12-dev \
libswscale-dev

wget http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/3.0.0/opencv-3.0.0.zip

unzip opencv-3.0.0.zip

cd opencv-3.0.0

mkdir build

cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=ON \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_V4L=ON ..

# The next command, make, takes about 3 hours and pushes the RPi to the limits of what it is capable of, and as a result the RPi will get noticeably warm
# To prevent overheating, it would be best to remove the top of the case and perch the RPi on a small metal object to facilitate air circulation and heat dissipation

sudo make            # this takes about 3 hours on the RPi 2

sudo make install

sudo nano /etc/ld.so.conf.d/opencv.conf

# opencv.conf will be blank, add the following line, then save and exit nano:

/usr/local/lib          # enter this in opencv.conf, NOT at the command line
(leave a blank line at the end of opencv.conf)

# back to the command line

sudo ldconfig

sudo nano /etc/bash.bashrc

# add the following lines at the bottom of bash.bashrc

PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig       # enter these at the bottom of bash.bashrc, NOT at the command line
export PKG_CONFIG_PATH                                          # enter these at the bottom of bash.bashrc, NOT at the command line
(leave a blank line at the end of bash.bashrc)

		# save bash.bashrc changes, then back at the command line, reboot

sudo shutdown -r now

# after rebooting, verify our OpenCV install

python                       # enter interactive Python prompt session
>>> import cv2
>>> cv2.__version__

# should say your OpenCV version, i.e. '3.0.0', press Ctrl+D to exit the Python prompt session
